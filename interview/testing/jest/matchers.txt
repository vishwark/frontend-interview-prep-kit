===========================
ðŸ“Œ JEST MATCHERS CHEATSHEET
===========================

1. BASIC EQUALITY
-----------------
expect(value).toBe(4)              // strict equality (===)
expect(obj).toEqual({a: 1})        // deep equality
expect(value).not.toBe(0)          // negation

WHEN TO USE:
- Use `toBe` for primitives (number, string, boolean).
- Use `toEqual` for arrays/objects.
- Use `not` when checking something should not happen.

2. TRUTHINESS
-------------
expect(null).toBeNull()
expect(undefined).toBeUndefined()
expect(value).toBeDefined()
expect(value).toBeTruthy()
expect(value).toBeFalsy()

WHEN TO USE:
- `toBeNull` when expecting null exactly.
- `toBeUndefined` when testing missing props/vars.
- `toBeTruthy`/`toBeFalsy` when only care about JS truthy/falsy.

3. NUMBERS
----------
expect(10).toBeGreaterThan(5)
expect(5).toBeLessThan(10)
expect(3.14).toBeCloseTo(3.1, 1)

WHEN TO USE:
- Use comparison matchers for counters, timers, lengths.
- Use `toBeCloseTo` for floating-point math.

4. STRINGS
----------
expect('frontend').toMatch(/end$/)
expect('hello world').toContain('world')

WHEN TO USE:
- Use `toMatch` with regex for patterns (email, url).
- Use `toContain` for substring checks.

5. ARRAYS & ITERABLES
---------------------
expect([1,2,3]).toContain(2)
expect([{a:1}]).toContainEqual({a:1})

WHEN TO USE:
- `toContain` when checking for primitive in array.
- `toContainEqual` when checking for object inside array.

6. OBJECTS
----------
expect({a:1,b:2}).toHaveProperty('a')
expect({a:1,b:2}).toHaveProperty('b', 2)
expect({a:1,b:2}).toMatchObject({a:1})

WHEN TO USE:
- `toHaveProperty` when checking specific keys.
- `toMatchObject` for partial matches (e.g. API response subset).

7. EXCEPTIONS
-------------
function throwError() { throw new Error('Oops') }
expect(throwError).toThrow()
expect(throwError).toThrow('Oops')

WHEN TO USE:
- Use when testing error handling, validations, API failures.

8. MOCK FUNCTIONS
-----------------
const mockFn = jest.fn()

mockFn('arg')
expect(mockFn).toHaveBeenCalled()
expect(mockFn).toHaveBeenCalledTimes(1)
expect(mockFn).toHaveBeenCalledWith('arg')
expect(mockFn).toHaveBeenLastCalledWith('arg')

WHEN TO USE:
- Use for event handlers, API calls, custom hooks.
- Good for verifying side-effects in frontend apps.

===========================
ðŸ“Œ ASYMMETRIC MATCHERS
===========================

1. expect.any(constructor)
--------------------------
expect(fn).toHaveBeenCalledWith(expect.any(Number))
â†’ matches any value of given type (Number, String, Object).

WHEN TO USE:
- For flexible argument types in mocks.

2. expect.anything()
--------------------
expect(fn).toHaveBeenCalledWith(expect.anything())
â†’ matches anything but `null` or `undefined`.

WHEN TO USE:
- Use when value doesnâ€™t matter, only that it exists.

3. expect.arrayContaining(subArray)
-----------------------------------
expect([1,2,3]).toEqual(expect.arrayContaining([2,3]))
â†’ checks if array contains all elements of sub-array.

WHEN TO USE:
- For partial matches in arrays (dropdown options, API results).

4. expect.objectContaining(partialObject)
-----------------------------------------
expect({a:1, b:2, c:3}).toEqual(expect.objectContaining({a:1, b:2}))
â†’ matches subset of object properties.

WHEN TO USE:
- For partial props/state/API response verification.

5. expect.stringContaining(substring)
-------------------------------------
expect('frontend testing').toEqual(expect.stringContaining('front'))
â†’ matches if string contains substring.

WHEN TO USE:
- For dynamic strings, messages, CSS class names.

6. expect.stringMatching(regex)
-------------------------------
expect('openai.com').toEqual(expect.stringMatching(/\.com$/))
â†’ matches if string satisfies regex.

WHEN TO USE:
- For email/URL validation, dynamic identifiers.

===========================
ðŸ“Œ RTL (jest-dom) MATCHERS
===========================
(Same as before...)

===========================
âœ… MOST USED IN FRONTEND
===========================
- toBe â†’ for primitives
- toEqual â†’ for objects/arrays
- toContain â†’ for array/string values
- toHaveBeenCalledWith â†’ for function calls
- toBeInTheDocument â†’ to check element render
- toHaveTextContent â†’ for text
- toHaveClass â†’ for styles
- toBeDisabled â†’ for form states
- objectContaining / arrayContaining â†’ partial matches

===========================
ðŸ”¥ TOP 10 MATCHERS ONLY
===========================
1. toBe â†’ primitive values
2. toEqual â†’ objects & arrays
3. toContain â†’ array/string includes
4. toHaveProperty â†’ object keys
5. toThrow â†’ error handling
6. toHaveBeenCalledWith â†’ mock function args
7. toBeInTheDocument â†’ element exists
8. toHaveTextContent â†’ text inside element
9. toHaveClass â†’ CSS classes
10. expect.objectContaining â†’ partial object match